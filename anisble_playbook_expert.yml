---
- name: Expert cheking git-repository
  hosts: localhost
  become: yes
  gather_facts: no
  vars:
    - ansible_ssh_port: 22
  tasks:
    - name: Groups add Debian hosts
      add_host:
       name: "{{ item }}"
       ansible_ssh_user: root
       ansible_ssh_pass: toor
       groups: Debian
       ansible_host_key_checking: false
      loop:
       - 'PJD-01'
       - 'PJD-02'
    - name: Group add CentOS hosts
      add_host:
       name: "{{ item }}"
       ansible_ssh_user: root
       ansible_ssh_pass: toor
       groups: Centos
       ansible_host_key_checking: false
      loop:
       - 'PJC-01'
       - 'PJC-02'
    - name: ==========================Checking that the Git repository is cloned==========================
      stat:
        path: /skill_hmao
      register: file_git_repository

    - debug:
        msg: "SUCCESS"
      when: file_git_repository.stat.exists

    - debug:
        msg: "NO SUCCESS"
      when: file_git_repository.stat.exists == False

- name: Expert Ansible tasks 01
  hosts: all
  become: yes
  vars:
    - ansible_ssh_port: 22
  tasks:
    - name: ==========================Connection VM
      ping:

    - name: ==========================Checking that the software.yaml package is installed
      package_facts:
        manager: "auto"

    - debug:
        msg: "SUCCESS"
      when: "'curl' in ansible_facts.packages and 'lynx' in ansible_facts.packages and 'vim' in ansible_facts.packages and 'mc' in ansible_facts.packages"

    - debug:
        msg: "NO SUCCESS"
      when: "'curl' not in ansible_facts.packages and 'lynx' not in ansible_facts.packages and 'vim' not in ansible_facts.packages and 'mc' not in ansible_facts.packages"

- name: Expert Ansible tasks 02
  hosts: all
  become: yes
  vars:
    - ansible_ssh_port: 22
  tasks:
    - name: ==========================Checking that the docker package is installed
      package_facts:
        manager: "auto"

    - debug:
        msg: "SUCCESS"
      when: "'docker-ce' in ansible_facts.packages or 'docker' in ansible_facts.packages"

    - debug:
        msg: "NO SUCCESS"
      when:  "'docker' not in ansible_facts.packages or 'docker' not in ansible_facts.packages"

- name: Expert Ansible tasks 03
  hosts: all
  become: yes
  vars:
    - ansible_ssh_port: 22
  tasks:
    - name: ==========================Checking that firewalld is activated
      shell: systemctl status firewalld | grep "Active:"
      register: "firewalld_check"

    - debug: var=firewalld_check.stdout_lines

    - name: ==========================Checking open firewalld ports
      shell: "firewall-cmd --list-all"
      register: firewalld_ports_allow

    - debug: var=firewalld_ports_allow.stdout_lines

    - name:  clear_host_errors
      meta: clear_host_errors

- name: Expert Ansible tasks 04
  hosts: all
  become: no
  vars:
    - ansible_ssh_port: 22
  tasks:
    - name: ==========================Check if port is open for SSH
      shell: "grep Port /etc/ssh/sshd_config"
      register: ssh_port

    - debug: var=ssh_port.stdout_lines

    - name:  clear_host_errors
      meta: clear_host_errors

    - name: ==========================Checking if public key authorization is allowed
      shell: "grep PubkeyAuthentication /etc/ssh/sshd_config"
      register: pubkey_allowed

    - debug: var=pubkey_allowed.stdout_lines

    - name:  clear_host_errors
      meta: clear_host_errors

    #- name: ==========================Checking if users are created
    #  shell: "sed 's/:.*//' /etc/passwd | grep root && sed 's/:.*//' /etc/passwd | grep Webdeveloper && sed 's/:.*//' /etc/passwd | grep Devopsengineer && sed 's/:.*//' /etc/passwd | grep Projectmanager"
    #  register: check_users_created

    #- debug: var=check_users_created.stdout_lines

    #- name:  clear_host_errors
    #  meta: clear_host_errors

    #- name: ==========================Keys check
    #  shell: "cat /home/Webdeveloper/.ssh/authorized_keys && cat /home/Devopsengineer/.ssh/authorized_keys && cat /home/Projectmanager/.ssh/authorized_keys && cat /home/Gabyshev-AG/.ssh/authorized_keys"
    #  register: keys_check

    #- debug: var=keys_check.stdout_lines

    #- name:  clear_host_errors
    #  meta: clear_host_errors

    - name: ==========================Checking that docker-compose is installed using the docker-compose script
      shell: "whereis docker-compose"
      register: compose_sh

    - debug: var=compose_sh.stdout_lines

    - name:  clear_host_errors
      meta: clear_host_errors

    - name: ==========================Verifying that the skillcloud-nginx directory has been created
      stat:
        path: /skillcloud-nginx
      register: skillcloud_directory

    - debug:
        msg: "SUCCESS"
      when: skillcloud_directory.stat.exists

    - debug:
        msg: "NO SUCCESS"
      when: skillcloud_directory.stat.exists == False

    - name:  clear_host_errors
      meta: clear_host_errors

    - name: ==========================Checking if files were copied to virtual machines
      shell: "ls /skillcloud-nginx"
      register: copy_files_skillcloud_nginx
      when: skillcloud_directory.stat.exists

    - debug: var=copy_files_skillcloud_nginx.stdout_lines

    - name:  clear_host_errors
      meta: clear_host_errors

    - name: ==========================Checking if SSH daemon has been restarted
      shell: "systemctl show sshd | grep ExecMainStartTimestamp="
      register: sshd_time_restarted

    - debug: var=sshd_time_restarted.stdout_lines

    - name:  clear_host_errors
      meta: clear_host_errors

    - name: ==========================Checking if firewalld daemon has been restarted
      shell: "systemctl show firewalld | grep ExecMainStartTimestamp="
      register: firewalld_time_restarted

    - debug: var=firewalld_time_restarted.stdout_lines

    - name:  clear_host_errors
      meta: clear_host_errors

    - name: ==========================Checking restarted VM
      shell: "uptime -s"
      register: restarted_vm

    - debug: var=restarted_vm.stdout_lines

    - name:  clear_host_errors
      meta: clear_host_errors

    - name: ==========================Docker-compose
      shell: "docker image ls"
      register: docker_image

    - debug: var=docker_image.stdout_lines

    - name:  clear_host_errors
      meta: clear_host_errors

    - name: ==========================Docker-compose
      shell: "docker ps"
      register: docker_ps

    - debug: var=docker_ps.stdout_lines

    - name:  clear_host_errors
      meta: clear_host_errors

    - name: ==========================Stop docker site Debian
      shell: docker stop site
      when: ansible_facts['distribution'] == 'Debian'

    - name:  clear_host_errors
      meta: clear_host_errors

    - name: ==========================curl www.sovnet.su
      shell: curl www.sovnet.su
      register: curl_centos
    - debug: var=curl_centos.stdout_lines

    - name:  clear_host_errors
      meta: clear_host_errors

    - name: ==========================Start docker site Debian
      shell: docker start site
      when: ansible_facts['distribution'] == 'Debian'

    - name:  clear_host_errors
      meta: clear_host_errors

    - name: ==========================Stop docker site Centos
      shell: docker stop site
      when: ansible_facts['distribution'] == 'CentOS'

    - name:  clear_host_errors
      meta: clear_host_errors

    - name: ==========================curl www.sovnet.su
      shell: curl www.sovnet.su
      register: curl_debian
    - debug: var=curl_debian.stdout_lines

    - name:  clear_host_errors
      meta: clear_host_errors

    - name: ==========================Start docker site Centos
      shell: docker start site
      when: ansible_facts['distribution'] == 'CentOS'
...
